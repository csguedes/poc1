package br.com.centralit.evm.citsmartevm.schedulers;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Logger;

import javax.ejb.Schedule;
import javax.ejb.Singleton;
import javax.ejb.Stateless;
import javax.ejb.Timeout;
import javax.ejb.Timer;
import javax.inject.Inject;


@Stateless
public class ExecutarTarefa {
	private Logger logger = Logger.getLogger(ExecutarTarefa.class.getName());
	
	@Inject
	ProdutorDeMensagens executarDeMensagens;
	

	public void enviarXMLCTM(String XML) {

		executarDeMensagens.setMessage(XML);
		executarDeMensagens.send();
	}
	
	
	@Schedule(second = "*/10", hour = "*")
	public String taskEnviarXMLsCTM() {

		String resultado = "";
		try {

			// Início

			String target_dir = "C:\\Users\\cristian.guedes\\Desktop\\inventários";
			File dir = new File(target_dir);
			File[] files = dir.listFiles();

			for (File f : files) {
				if (f.isFile()) {
					BufferedReader inputStream = null;

					try {
						inputStream = new BufferedReader(new FileReader(f));
						String line;

						while ((line = inputStream.readLine()) != null) {
							resultado += line;
						}
					} finally {
						if (inputStream != null) {
							inputStream.close();
						}
					}
				}

				resultado = resultado
						.replace("<?xml version=\"1.0\" encoding=\"utf-8\"?>",
								"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><EventoCTM>");
				resultado = resultado + "</EventoCTM>";

				// Remover caracteres "inválidos"
				resultado = resultado.replaceAll("\0", "_");

				enviarXMLCTM(resultado);

				resultado = "";

			}

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return resultado;
	}
	
	@Timeout
	private void generateReport(Timer timer) {

//	    logger.info("!!--timeout invoked here "+new Date());
//	    System.out.println("!!--timeout invoked here "+new Date());

	 

	}	
	
	
}
