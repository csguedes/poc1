/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.centralit.nagios.livestatus.response;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import br.com.centralit.nagios.livestatus.actions.LS_TablesBase;
import br.com.centralit.nagios.livestatus.query.LS_Query;
import br.com.centralit.nagios.livestatus.query.LivestatusSeparator;
import br.com.centralit.zabbix.util.JSONConverter;

/**
 * 
 * @author adenir
 */
public class LS_Response {

	private final List<String> valuesAsStringList;
	private final LS_Query query;
	private int line_count = 0;

	public LS_Response(LS_Query pQuery) {
		valuesAsStringList = new ArrayList<>();
		query = pQuery;
	}

	public String[] getHeadersColumns(){
		String[] arrayHeadersColumns = new String[query.columns.size()];
		query.columns.toArray(arrayHeadersColumns);
		return arrayHeadersColumns;
	}
	
	public String asString(){
		String arrayValuesAsString = "";

		for (String s : valuesAsStringList)
		{
			arrayValuesAsString += s + "\t";
		}

		return arrayValuesAsString;
	}
	
	public int sizeColumns(){
		return query.columns.size();
	}
	
	public String getHeadersColumnsAt(int index){
		return query.columns.get(index);
	}
	
	public String getColumnsAndValueAsJson(LS_TablesBase obj) {
		int qdlines = size();
		
		for (int k = 0; k < qdlines; k++) {
			String[] cols = valuesAsStringList.get(k).split(LivestatusSeparator.SEP2());
			for (int i = 0; i < cols.length; i++) {
				obj.set_attribute(cols[i], getHeadersColumnsAt(i),  obj.getClass());
			}
		}

		obj.createObjects();
		
		return JSONConverter.toJson(obj);
	}
	
	public Map<String, String> getMapColumnsAndValue() {
		int qdlines = size();
		Map<String, String> mapKeyValue = new HashMap<>();
		if (!(qdlines == 1 || sizeColumns() == 1)) {
			mapKeyValue.put("error", String.format("Size of Columns list or size of headers list differ the 1 , size=(%s)", sizeColumns(), qdlines));
			return mapKeyValue;
		}

		for (int k = 0; k < qdlines; k++) {
			String[] cols = valuesAsStringList.get(k).split(LivestatusSeparator.SEP2());
			if (cols.length != sizeColumns()) {
				mapKeyValue.put("error", String.format("Headers count(%s) not equal columns count(%s)", sizeColumns(), cols.length));
				return mapKeyValue;
			}

			for (int i = 0; i < cols.length; i++) {
				mapKeyValue.put(getHeadersColumnsAt(i), cols[i]);
			}
		}

		return mapKeyValue;
	}

	public void add(String line) {
		boolean hasColumns = (query.hasColumns && query.hasColumnHeaders) || (!query.hasColumns);
		if (hasColumns && line_count == 0) {
			query.columns.clear();
			for (String col : line.split(LivestatusSeparator.SEP2()))
			{
				query.columns.add(col);
			}	
		} else {
			valuesAsStringList.add(line);
		}
		line_count += 1;
	}

	public int size() {
		return valuesAsStringList.size();
	}

}
